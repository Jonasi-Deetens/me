generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String  @id @default(cuid())
  email        String  @unique
  name         String?
  passwordHash String?

  playthroughs  StoryPlaythrough[] @relation("UserPlaythroughs")
  Player        Player[]
  emailVerified DateTime?
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id])
}

// Core game objects
model Object {
  id          Int        @id @default(autoincrement())
  name        String
  description String
  type        ObjectType
  properties  Json // Base properties for all instances
  createdAt   DateTime   @default(now())

  // Relations
  templateObjects TemplateObject[]
  gameObjects     GameObject[]
}

model TemplateObject {
  id         Int    @id @default(autoincrement())
  object     Object @relation(fields: [objectId], references: [id])
  objectId   Int
  properties Json // Override properties for this template instance

  tile   TemplateTile @relation(fields: [tileId], references: [id])
  tileId Int
}

model GameObject {
  id         Int    @id @default(autoincrement())
  object     Object @relation(fields: [objectId], references: [id])
  objectId   Int
  properties Json // Runtime properties for this game instance

  tile      Tile     @relation(fields: [tileId], references: [id])
  tileId    Int
  createdAt DateTime @default(now())
}

// Game enums
enum TileType {
  GRASS
  WATER
  SAND
  MOUNTAIN
  FOREST
  ROAD
  WALL
  CAVE_FLOOR
  CAVE_WALL
  WOODEN_FLOOR
  STONE_FLOOR
  CARPET
  TILE_FLOOR
  KITCHEN_FLOOR
  BEDROOM_FLOOR
  BATHROOM_FLOOR
  WOODEN_WALL
  STONE_WALL
  WALLPAPER
  WINDOW
  DOORWAY
  STAIRS_UP
  STAIRS_DOWN
}

enum ObjectType {
  // Storage
  CHEST
  CONTAINER
  STORAGE

  // Environment
  TREE
  ROCK
  HOUSE
  PORTAL
  SIGN
  DOOR
  SHRINE

  // Equipment
  WEAPON
  ARMOR
  ACCESSORY

  // Items
  ITEM
  CONSUMABLE
  QUEST_ITEM
  CURRENCY

  // Furniture
  FURNITURE
  CRAFTING_STATION
  DECORATION

  // Interactive
  LEVER
  BUTTON
  TRAP
  LIGHT_SOURCE
}

enum StatusEffect {
  POISONED
  BURNING
  FROZEN
  BLESSED
  CURSED
  STRENGTHENED
  WEAKENED
}

model CharacterClass {
  id          Int    @id @default(autoincrement())
  name        String
  description String

  // Base stats multipliers
  hpMultiplier           Float @default(1.0)
  manaMultiplier         Float @default(1.0)
  strengthMultiplier     Float @default(1.0)
  agilityMultiplier      Float @default(1.0)
  intelligenceMultiplier Float @default(1.0)

  // Class specific abilities
  abilities Json // Array of ability IDs or objects

  // Class specific bonuses
  passiveBonuses Json // {criticalChance, dodgeChance, etc}

  // Starting equipment
  startingEquipment Json // Array of item IDs

  // Class progression
  levelUpBonuses Json // {hp, mana, strength, etc per level}

  characters         Character[]
  templateCharacters TemplateCharacter[]
}

// Story and world
model StoryTemplate {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime @default(now())

  playthroughs StoryPlaythrough[]
  maps         TemplateMap[]
}

model TemplateMap {
  id          Int    @id @default(autoincrement())
  name        String
  description String
  width       Int
  height      Int

  storyTemplate StoryTemplate @relation(fields: [templateId], references: [id])
  templateId    Int

  templateTiles TemplateTile[]
}

model TemplateTile {
  id    Int      @id @default(autoincrement())
  x     Int
  y     Int
  layer Int
  type  TileType

  map   TemplateMap @relation(fields: [mapId], references: [id])
  mapId Int

  templateObjects TemplateObject[]
  characters      TemplateCharacter[] @relation("TemplateCharacterTile")

  createdAt DateTime @default(now())

  @@unique([x, y, layer, mapId])
}

model TemplateCharacter {
  id       Int     @id @default(autoincrement())
  name     String
  isPlayer Boolean @default(false)

  // Class related
  class       CharacterClass @relation(fields: [classId], references: [id])
  classId     Int
  level       Int            @default(1)
  skillPoints Int            @default(0)

  stat   Stat? @relation("TemplateCharacterStat", fields: [statId], references: [id])
  statId Int?  @unique

  // Equipment and inventory
  equipment Json? // Equipped items
  inventory Json? // Inventory items
  gold      Int   @default(0)

  // Status effects
  statusEffects StatusEffect[]

  // Combat stats
  criticalChance Float @default(0.05)
  dodgeChance    Float @default(0.05)
  armor          Int   @default(0)
  magicResist    Int   @default(0)

  // Position
  tile   TemplateTile? @relation("TemplateCharacterTile", fields: [tileId], references: [id])
  tileId Int?

  npcData NPC? @relation("TemplateNPCData")

  // Timestamps
  createdAt       DateTime  @default(now())
  lastCombatTime  DateTime?
  lastLevelUpTime DateTime?
}

model StoryPlaythrough {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  name      String

  storyTemplate   StoryTemplate @relation(fields: [storyTemplateId], references: [id])
  storyTemplateId Int

  user   User   @relation("UserPlaythroughs", fields: [userId], references: [id])
  userId String

  character   Character? @relation("PlaythroughPlayer", fields: [characterId], references: [id])
  characterId Int?       @unique

  maps       Map[]
  characters Character[] @relation("PlaythroughCharacters")
}

model Map {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  width       Int
  height      Int
  createdAt   DateTime @default(now())

  playthrough   StoryPlaythrough @relation(fields: [playthroughId], references: [id])
  playthroughId Int

  tiles Tile[]
}

model Tile {
  id    Int      @id @default(autoincrement())
  x     Int
  y     Int
  layer Int
  type  TileType

  map   Map @relation(fields: [mapId], references: [id])
  mapId Int

  objects    GameObject[]
  characters Character[]  @relation("CharacterTile")

  createdAt DateTime @default(now())

  @@unique([x, y, layer, mapId])
}

model Character {
  id       Int     @id @default(autoincrement())
  name     String
  isPlayer Boolean @default(false)

  // Class related
  class       CharacterClass @relation(fields: [classId], references: [id])
  classId     Int
  level       Int            @default(1)
  skillPoints Int            @default(0)
  behavior    Json? // NPC behavior

  // Core stats
  stat   Stat? @relation("CharacterStat", fields: [statId], references: [id])
  statId Int?  @unique

  // Equipment and inventory
  equipment Json? // Equipped items
  inventory Json? // Inventory items
  gold      Int   @default(0)

  // Status effects
  statusEffects StatusEffect[]

  // Combat stats
  criticalChance Float @default(0.05)
  dodgeChance    Float @default(0.05)
  armor          Int   @default(0)
  magicResist    Int   @default(0)

  // Position
  tile   Tile? @relation("CharacterTile", fields: [tileId], references: [id])
  tileId Int?

  // Relations
  playthrough   StoryPlaythrough @relation("PlaythroughCharacters", fields: [playthroughId], references: [id])
  playthroughId Int

  playerData Player? @relation("PlayerData")
  npcData    NPC?    @relation("NPCData")

  // Timestamps
  createdAt       DateTime  @default(now())
  lastCombatTime  DateTime?
  lastLevelUpTime DateTime?

  StoryPlaythrough StoryPlaythrough? @relation("PlaythroughPlayer")
}

model Stat {
  id    Int @id @default(autoincrement())
  level Int @default(1)

  // Core stats
  hp           Int
  maxHp        Int
  mana         Int @default(0)
  maxMana      Int @default(0)
  strength     Int
  agility      Int
  intelligence Int
  charisma     Int
  luck         Int
  rage         Int @default(0)
  maxRage      Int @default(0)
  energy       Int @default(0)
  maxEnergy    Int @default(0)
  stamina      Int @default(0)
  maxStamina   Int @default(0)
  focus        Int @default(0)
  maxFocus     Int @default(0)
  xp           Int @default(0)
  spirit       Int @default(0)
  maxSpirit    Int @default(0)

  // Combat derived stats
  attackPower  Int @default(0)
  spellPower   Int @default(0)
  healingPower Int @default(0)

  // Resource regeneration
  hpRegen   Float @default(1.0)
  manaRegen Float @default(1.0)

  character         Character?         @relation("CharacterStat")
  templateCharacter TemplateCharacter? @relation("TemplateCharacterStat")
}

model Player {
  id          Int       @id @default(autoincrement())
  character   Character @relation("PlayerData", fields: [characterId], references: [id])
  characterId Int       @unique

  // Player specific data
  achievements    Json? // Unlocked achievements
  questLog        Json? // Active and completed quests
  reputation      Json? // Reputation with different factions
  discoveredAreas Json? // Areas/maps discovered

  // Social
  friends Json? // Array of friend IDs
  guild   Json? // Guild information if any

  // Gameplay stats
  playTime        Int @default(0) // In minutes
  monstersKilled  Int @default(0)
  questsCompleted Int @default(0)
  deaths          Int @default(0)

  // Settings and preferences
  settings Json? // User preferences

  // Authentication
  userId String
  user   User   @relation(fields: [userId], references: [id])
}

model NPC {
  id                  Int                @id @default(autoincrement())
  character           Character?         @relation("NPCData", fields: [characterId], references: [id])
  characterId         Int?               @unique
  templateCharacter   TemplateCharacter? @relation("TemplateNPCData", fields: [templateCharacterId], references: [id])
  templateCharacterId Int?               @unique

  // AI behavior
  behavior   Json // Combat and movement patterns
  dialogue   Json? // Dialogue options
  questGiver Boolean @default(false)
  merchant   Boolean @default(false)

  // If merchant
  shopInventory Json? // Available items to sell

  // If quest giver
  availableQuests Json? // Quests this NPC can give

  // Faction and relations
  faction    String? // Which faction this NPC belongs to
  hostileTo  Json? // Array of hostile faction names
  friendlyTo Json? // Array of friendly faction names
}
